{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAyCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EAhDA,CACXO,UAAWC,SAASC,cAAc,WAG/BF,UAAUG,iBAAiB,UAEhC,SAAkBC,GAChBA,EAAMC,iBACN,MAAMC,EAAaC,OAAOH,EAAMI,cAAcf,MAAMgB,OAC9CC,EAAYH,OAAOH,EAAMI,cAAcG,KAAKF,OAC5CG,EAAcL,OAAOH,EAAMI,cAAcK,OAAOJ,OACtD,GAAIH,EAAa,EAEf,YADAQ,EAAAzB,GAAS0B,OAAOC,KAAK,kCAGvB,GAAIN,EAAY,EAEd,YADAI,EAAAzB,GAAS0B,OAAOC,KAAK,iCAGvB,GAAIJ,EAAc,EAEhB,YADAE,EAAAzB,GAAS0B,OAAOC,KAAK,mCAIvB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAaK,GAAK,EACpC1B,EAAc0B,EAAI,EAAGA,EAAIP,EAAYJ,GAClCY,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBqB,EAAAzB,GAAS0B,OAAOI,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOM,QACd,sBAAoB7B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputForm: document.querySelector('.form'),\n};\n\nrefs.inputForm.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const delayValue = Number(event.currentTarget.delay.value);\n  const stepValue = Number(event.currentTarget.step.value);\n  const amountValue = Number(event.currentTarget.amount.value);\n  if (delayValue < 0) {\n    Notiflix.Notify.info('Pleas input delay value from 0');\n    return;\n  }\n  if (stepValue < 0) {\n    Notiflix.Notify.info('Pleas input step value from 0');\n    return;\n  }\n  if (amountValue < 1) {\n    Notiflix.Notify.info('Pleas input amount value from 1');\n    return;\n  }\n\n  for (let i = 0; i < amountValue; i += 1) {\n    createPromise(i + 1, i * stepValue + delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","inputForm","document","querySelector","addEventListener","event","preventDefault","delayValue","Number","currentTarget","value","stepValue","step","amountValue","amount","$parcel$interopDefault","Notify","info","i","then","success","catch","failure"],"version":3,"file":"03-promises.2c9a8444.js.map"}